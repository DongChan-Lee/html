*** Ajax : 웹페이지를 reload하지 않고 정보를 변경하고 싶다면 --> 현대적인 웹, 앱을 만드는 데 필수적인 것!
*** Ajax : 비동기처리(js하면 어떻게든 거쳐감) --> 그 영역에 들어가면 되게 중요하게 생각을 함. 
왜 "비동기처리가 필요할까"를 알아봐라("...."이 화면에 나오면서 뒷단에서 분석처리가 이루어질 때 중요한건지?)


*** 웹서버의 문서 디렉토리(apache2/htdocs)에 위치시키기!!
<WEB1 - 19.1.1. 웹서버 설치(윈도우)>
- C:\Bitnami\wampstack-8.0.2-0
- password : 4138262
- MySQL Server port : 3307
- http://127.0.0.1/index.html 에서 "127.0.0.1"가 의미하는 것은 Internet Protocol Address(IP 주소)로, 웹 브라우저가 설치되어 있는 각자의 로컬 컴퓨터의 "웹서버"를 가리킨다고 약속되어 있는 것!(컴퓨터 자기 자신을 의미한다)
--> 웹서버가 htdoc(HyperText Document)라는 디렉토리에서 파일을 찾도록 설정되어 있는 상태.
- http(Hyper Text Transfer Protocol(규약, 약속) : "웹페이지를 웹브라우저와 웹서버가 서로 주고받기 위한 약속"을 의미


<수업의 목적>
- "AJAX를 알면 무엇을 얻게 될 것인지?" : 부분적으로 웹페이지를 갱신할 수 있다
- "그것이 왜 좋은가?" : 요청과 관련된 딱 필요한 내용만 갱신할 수 있다
- 사용자 입장에서는 내용이 바뀌어도 스크롤이 바뀐다거나 다른 부분의 내용이 전환되는 것이 없기 때문에 변경되는 부분에만 집중할 수 있는 UI를 경험하게 된다. (사용성 증대)
- 그리고 필요한 내용만 부분적으로 load할 수 있기 때문에 서버(server)뿐만 아니라 웹 브라우저를 사용하는 사용자(client)의 입장에서도
시간과 돈, 네트워크 자원 등의 여러 비용(cost)을 절약할 수 있다는 굉장히 중요한 효과가 있다.
- Ajax를 도입해 요청마다 알맞게 바뀔 수 있는 부분을 서버에서 가져와서 동적으로 렌더링할 수 있다.
- Single-Page Application(SPA) : 하나의 페이지로 여러 정보들을 표현할 수 있는 application임. 이걸 수행할 수 있는 핵심적인 메커니즘이 바로 Ajax인 것!!

<fetch API>
fetch('html') : html이라는 문서를 실행시켜줘.
then(func) : fetch API의 응답이 끝나면 func 함수를 실행시켜줘.
- 상태 = 200(정상 작동), 상태 = 404(Not Found)
- response 객체 : fetch를 통해 요청했을 때 웹서버가 응답한 결과를 담고 있는 객체(여러 가지 속성을 통해 서버랑 통신할 때 어떻게 통신했는지에 대한 정보를 얻을 수 있는 데이터)

<fragment identifier를 이용한 초기 페이지 기능 구현>
- id 값을 통해 fragment를 지정할 수 있고, 그 id값을 fragment identifier라고 부름

<초기 페이지>
: #은 기본적으로 '북마크'를 의미하는 기호이므로, 
: #! (hash bang)을 이용하여 링크를 구현!
: 지금은 Pjax(pushState + ajax)라는 더 성능이 좋아진 것을 사용


<수업을 마치며>
- Ajax : 페이지의 전환 없이도 서버로부터 데이터를 부분적으로 가져와서 동적으로 페이지의 내용을 교체하는 방법
- XML, JSON(좀 더 나음) : comma만으로 구분하기 어려울 때
- PJAX : 검색엔진에게 검색되고 싶을 때
- Progressive Web Apps(PWA) : SPA의 기반 위에서 offline에서도 동작하게 만드는 기술(online + offline)


